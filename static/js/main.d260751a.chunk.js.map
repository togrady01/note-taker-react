{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getNoteTitle","Date","toLocaleTimeString","toLocaleDateString","App","React","useState","stored","window","localStorage","getItem","JSON","parse","e","notes","setNotes","activeNote","setActiveNote","hasNotes","length","isEditing","undefined","editorRef","useRef","createNote","noteId","currentNotes","setItem","stringify","onClick","removeItem","id","map","note","index","className","substring","replace","onChange","splice","target","value","disabled","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAGMA,EAAe,4BAAS,IAAIC,MAAOC,qBAApB,aAA4C,IAAID,MAAOE,qBAAvD,oCAuENC,MArEf,WACE,MAA0BC,IAAMC,UAAS,WACvC,IAAMC,EAASC,OAAOC,aAAaC,QAAQ,cAC3C,IACE,GAAIH,EAAQ,OAAOI,KAAKC,MAAML,GAC9B,MAAOM,IACT,MAAO,CAACb,QALV,mBAAOc,EAAP,KAAcC,EAAd,KAOA,EAAoCV,IAAMC,SAAS,GAAnD,mBAAOU,EAAP,KAAmBC,EAAnB,KACMC,EAAWJ,EAAMK,OAAS,EAC1BC,OAA2BC,IAAfL,EACZM,EAAYjB,IAAMkB,SAGlBC,EAAa,WACjB,IAAMC,EAASX,EAAMK,OACfO,EAAY,sBAAOZ,GAAP,CAAcd,MAChCe,EAASW,GACTT,EAAcQ,GACdjB,OAAOC,aAAakB,QAAQ,aAAchB,KAAKiB,UAAUF,KAgB3D,OACE,qCACE,mCACE,4CACA,wBAAQG,QAASL,EAAjB,sBACA,wBAAQK,QAlBK,WACjBd,EAAS,IACTE,OAAcI,GACdb,OAAOC,aAAaqB,WAAW,eAe3B,gCAEF,sBAAKC,GAAG,UAAR,UACE,8BACE,6BAEIjB,EAAMkB,KAAI,SAACC,EAAMC,GAAP,OACR,6BACE,wBAAQC,UAAWD,IAAUlB,EAAa,cAAWK,EAAWQ,QAAS,kBAAMZ,EAAciB,IAA7F,SAAsGD,EAAKG,UAAU,EAAE,IAAIC,QAAQ,MAAO,QAD5I,UAAYH,GAAZ,OAAoBD,EAAKG,UAAU,EAAE,IAAIC,QAAQ,MAAO,cAQhE,+BACE,0BACEC,SAAUlB,EA7BD,SAACP,GAClB,IAAMa,EAAY,YAAOZ,GACzBY,EAAaa,OAAOvB,EAAY,EAAGH,EAAE2B,OAAOC,OAC5C1B,EAASW,GACTlB,OAAOC,aAAakB,QAAQ,aAAchB,KAAKiB,UAAUF,UAyBdL,EACnCoB,MAAOvB,GAAYE,EAAYN,EAAME,GAAc,8BACnDa,QAASX,OAAWG,EAAYG,EAChCkB,UAAWtB,GAAaF,EACxByB,IAAKrB,aCtDFsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d260751a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst getNoteTitle = () => `${new Date().toLocaleTimeString()} ${new Date().toLocaleDateString()}\\n---------------------------\\n`;\n\nfunction App() {\n  const [notes, setNotes] = React.useState(() =>  {\n    const stored = window.localStorage.getItem('NOTE_TAKER');\n    try {\n      if (stored) return JSON.parse(stored);\n    } catch (e) {}\n    return [getNoteTitle()];\n  });\n  const [activeNote, setActiveNote] = React.useState(0);\n  const hasNotes = notes.length > 0;\n  const isEditing = activeNote !== undefined;\n  const editorRef = React.useRef();\n\n\n  const createNote = () => {    \n    const noteId = notes.length; \n    const currentNotes = [...notes, getNoteTitle()];\n    setNotes(currentNotes)\n    setActiveNote(noteId);\n    window.localStorage.setItem('NOTE_TAKER', JSON.stringify(currentNotes));\n  }\n\n  const clearNotes = () => {\n    setNotes([]);\n    setActiveNote(undefined);\n    window.localStorage.removeItem('NOTE_TAKER');\n  }\n\n  const updateNote = (e) => {\n    const currentNotes = [...notes];\n    currentNotes.splice(activeNote, 1, e.target.value);\n    setNotes(currentNotes);\n    window.localStorage.setItem('NOTE_TAKER', JSON.stringify(currentNotes));\n  }\n\n  return (\n    <>\n      <header>\n        <h1>Note Taker</h1>\n        <button onClick={createNote}>New Note</button>\n        <button onClick={clearNotes}>Clear All Notes</button>\n      </header>\n      <div id=\"content\">\n        <nav>\n          <ul>\n            {\n              notes.map((note, index) => (\n                <li key={`${index}${note.substring(0,25).replace(/\\n/g, ' ')}`}>\n                  <button className={index === activeNote ? 'active' : undefined} onClick={() => setActiveNote(index)}>{note.substring(0,25).replace(/\\n/g, ' ')}</button>\n                </li>\n                )\n              )\n            }\n          </ul>\n        </nav>\n        <main>\n          <textarea \n            onChange={isEditing ? updateNote : undefined}\n            value={hasNotes && isEditing ? notes[activeNote] : 'Click to create a new note!'}\n            onClick={hasNotes ? undefined : createNote}\n            disabled={!isEditing && hasNotes}\n            ref={editorRef}\n          />\n        </main>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}